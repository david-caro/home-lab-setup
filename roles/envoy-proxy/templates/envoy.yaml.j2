admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  clusters:
{% for backend in envoy_config["backends"] %} 
  - connect_timeout: 10s
    dns_lookup_family: V4_ONLY
    load_assignment:
      cluster_name: service_{{ backend["name"] }}
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: {{ backend["address"] }}
                port_value: {{ backend["port"] }}
    name: service_{{ backend["name"] }}
    type: LOGICAL_DNS
{% endfor %}

  listeners:
{% for port in envoy_config["ports"] %}
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: {{ port }}
    filter_chains:
    - transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            # note that the path of the domain is the first one passed to certbot, but it has all the certificates
            - certificate_chain: {filename: "/etc/letsencrypt/live/dcaro.es/fullchain.pem"}
              private_key: {filename: "/etc/letsencrypt/live/dcaro.es/privkey.pem"}
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          upgrade_configs:
          - upgrade_type: websocket
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          http_filters:
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          route_config:
            name: local_route
            virtual_hosts:
{% for backend in envoy_config["backends"] %}
            - domains:
{% for domain in backend["domains"] %}
              - '{{ backend["name"] }}.{{ domain }}'
              - '{{ backend["name"] }}.{{ domain }}:1234'
{% endfor %}
              name: {{ backend["name"] }}
              routes:
              - match:
                  prefix: /
                route:
                  cluster: service_{{ backend["name"] }}
{% endfor %}
          stat_prefix: ingress_http
    name: listener_{{ port }}
{% endfor %}
