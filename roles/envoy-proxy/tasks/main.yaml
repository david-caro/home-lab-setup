---
- name: "envoy-proxy tasks"
  tags:
    - envoy-proxy
  block:
    - name: "Add envoy repo - Fedora"
      yum_repository:
        name: "Tetrate GetEnvoy - Stable"
        baseurl: "https://rpm.dl.getenvoy.io/public/rpm/el/8/$basearch"
        enabled: true
        gpgkey: "https://rpm.dl.getenvoy.io/public/gpg.CF716AF503183491.key"
        gpgcheck: false
        sslverify: true
        sslcacert: "/etc/pki/tls/certs/ca-bundle.crt"
        metadata_expire: "300"
        description: "Envoy packages"
      when:
        - ansible_facts['distribution'] != "Debian"

    - name: "Install packages"
      ansible.builtin.package:
        name: "getenvoy-envoy"
        state: present
        use: apt
      when:
        - ansible_facts['distribution'] != "Debian"

    - name: "Add envoy service"
      ansible.builtin.copy:
        src: envoy.service
        dest: "/usr/lib/systemd/system/envoy.service"
      notify:
        - "Reload envoy"
      when:
        - ansible_facts['distribution'] != "Debian"

    - name: "Add envoy proxy config"
      template:
        src: envoy.yaml.j2
        dest: "/etc/envoy.yaml"
      notify:
        - "Reload envoy"

    - name: "Make sure envoy is running"
      ansible.builtin.systemd:
        name: envoy
        state: started
        enabled: True
      when:
        - ansible_facts['distribution'] != "Debian"

    - name: "Start the envoy container"
      tags:
        - podman
        - container
      containers.podman.podman_container:
        name: "envoy"
        image: "docker.io/envoyproxy/envoy:v1.25-latest"
        state: started
        privileged: "true"
        expose:
          - "443"
          - "9901"
        ports:
          - "443:443"
          - "9901:9901"
        restart_policy: "always"
        env:
          ENVOY_UID: 0
          ENVOY_GID: 0
        volumes:
          - /etc/envoy.yaml:/etc/envoy/envoy.yaml:ro
          - /etc/letsencrypt/archive/dcaro.es/fullchain1.pem:/etc/letsencrypt/live/dcaro.es/fullchain.pem:ro
          - /etc/letsencrypt/archive/dcaro.es/privkey1.pem:/etc/letsencrypt/live/dcaro.es/privkey.pem:ro

    - name: "Add dns service to firewalld"
      ansible.posix.firewalld:
        service: dns
        permanent: true
        state: enabled

- name: "envoy-tunnel tasks"
  tags:
    - envoy-tunnel
  block:
    - name: "Make sure ssh dir exists"
      ansible.builtin.file:
        state: "directory"
        path: "/root/.ssh/"
        owner: root
        group: root
        mode: "700"

    - name: "Add ssh tunnel credentials"
      with_items:
        - "{{ secrets_repo_path }}/home_automation/envoy-tunnel/id_rsa"
        - "{{ secrets_repo_path }}/home_automation/envoy-tunnel/id_rsa.pub"
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/root/.ssh/"
        owner: root
        group: root
        mode: "400"
      notify:
        - "Reload envoy-tunnel"

    - name: "Add ssh tunnel service"
      ansible.builtin.copy:
        src: envoy-tunnel.service
        dest: "/usr/lib/systemd/system/envoy-tunnel.service"
      notify:
        - "Reload envoy-tunnel"

    - name: "Make sure envoy-tunnel is running"
      ansible.builtin.systemd:
        name: envoy-tunnel
        state: started
        enabled: True

- name: "certbot tasks"
  tags:
    - certbot
  block:
    - name: "Install packages"
      ansible.builtin.package:
        name:
          - "certbot"
          - "python3-certbot-dns-ovh"
        state: present

    - name: "Add ovh creds"
      ansible.builtin.template:
        src: ovh_creds.ini.j2
        dest: "/etc/ovh-creds.ini"
        mode: "0600"
        owner: "root"
        group: "root"

    - name: "Add certbot config"
      ansible.builtin.copy:
        src: dcaro.es.conf
        dest: "/etc/letsencrypt/renewal/dcaro.es.conf"
        mode: "0400"
        owner: "root"
        group: "root"

    - name: "Add certbot timer"
      ansible.builtin.copy:
        src: certbot.timer
        dest: "/usr/lib/systemd/system/certbot.timer"

    - name: "Add certbot service"
      ansible.builtin.copy:
        src: certbot.service
        dest: "/usr/lib/systemd/system/certbot.service"
      notify:
        - "Reload certbot"

    - name: "Flush handlers"
      meta: flush_handlers

    - name: "Make sure certbot is running"
      ansible.builtin.systemd:
        name: certbot
        state: started
        enabled: True
