---
- name: "Gather nbd mapped volumes"
  nbd_mappings_facts:

- name: "Add mapping volume service for '{{ current_volume.name }}'"
  template:
    src: "rbdmap-volume.service.j2"
    dest: "/usr/lib/systemd/system/rbdmap-{{ app_volumes_ceph_pool }}-{{ current_volume.name }}.service"

- name: "Map volume '{{ current_volume.name }}' under /dev/nbd*"
  ansible.builtin.systemd:
    state: started
    name: "rbdmap-{{ app_volumes_ceph_pool }}-{{ current_volume.name }}.service"
  register: mapping_result

- name: "Refresh nbd mapped volumes (in case we mapped a new one)"
  nbd_mappings_facts:
  when: mapping_result.changed

- name: "Fail if volume is not mapped"
  ansible.builtin.fail:
    msg: >-
      Failed to map volume {{ current_volume.name }}: \n
        {{ mapping_result.stdout }}\n
        {{ mapping_result.stderr }}
  when: current_volume.name not in ansible_facts['nbd_mappings']

# TODO: figure out how to use x-systemd.mkfs in the mount instead
- name: "Check if {{ current_volume.name }} is partitioned"
  shell:
    cmd: "file -sL {{ ansible_facts['nbd_mappings'][current_volume.name]['device'] }}"
  register: is_partitioned

- name: "Partition {{ current_volume.name }}:{{ ansible_facts['nbd_mappings'][current_volume.name]['device'] }}"
  shell:
    cmd: "mkfs.btrfs {{ ansible_facts['nbd_mappings'][current_volume.name]['device'] }}"
  when: is_partitioned.stdout.find('data') != -1

- name: "Create mountpoint"
  ansible.builtin.file:
    path: "/mnt/{{ current_volume.name }}"
    state: "directory"
    mode: "0775"

- name: "Mount volume '{{ current_volume.name }}'"
  ansible.posix.mount:
    path: "/mnt/{{ current_volume.name }}"
    opts: "noauto,rw,x-systemd.requires=rbdmap-{{ app_volumes_ceph_pool }}-{{ current_volume.name }}"
    src: "{{ ansible_facts['nbd_mappings'][current_volume.name]['device'] }}"
    fstype: btrfs
    state: mounted
